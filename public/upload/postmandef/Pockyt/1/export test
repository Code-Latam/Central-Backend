{
	"info": {
		"_postman_id": "caf52a9e-0c53-4e2b-b4d4-c2bbdd3ca821",
		"name": "export test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25749966",
		"_collection_link": "https://red-comet-433941.postman.co/workspace/POCKYT-Work-Space~a7046763-adde-4d20-8d27-90a99eab112a/collection/25749966-caf52a9e-0c53-4e2b-b4d4-c2bbdd3ca821?action=share&source=collection_link&creator=25749966"
	},
	"item": [
		{
			"name": "ADD API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var crypto = require('crypto-js')\r",
							"\r",
							"var requestBody = pm.request.body\r",
							"\r",
							"console.log(requestBody);\r",
							"\r",
							"var myPOSParamObject = {\r",
							"    merchantNo: pm.collectionVariables.get('merchantNo'),\r",
							"    storeNo: pm.collectionVariables.get('storeNo'),\r",
							"    amount: requestBody.amount,\r",
							"    currency: requestBody.currency,\r",
							"    settleCurrency: requestBody.settleCurrency,\r",
							"    reference: requestBody.reference\r",
							"}\r",
							"\r",
							"// Calculate the VeriSign signature:\r",
							"\r",
							"var MySignature = CalculateSignature(pm.collectionVariables.get('MyToken'), myPOSParamObject);\r",
							"\r",
							"postman.setEnvironmentVariable(\"merchantNo\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"storeNo\", myPOSParamObject.storeNo);\r",
							"postman.setEnvironmentVariable(\"\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"MySignature\", MySignature);\r",
							"\r",
							"\r",
							"// function that calculates the signature according to Pockyt rules\r",
							"function CalculateSignature(token,parameters)\r",
							"{\r",
							"    // calculate the hash value of the token\r",
							"    \r",
							"    // var ApiTokenHashvalue = CryptoJS.MD5(str_1 + str_2).toString();\r",
							"    var ApiTokenHashvalue = crypto.MD5(token).toString();\r",
							"    \r",
							"    // order parameters alfabetically\r",
							"    var SortedParams = sortObj(parameters);\r",
							"    \r",
							"    // Concatenate: add '&' between key and value pair and replace : for = \r",
							"    var MyString = '' ;\r",
							"    for (const [key, value] of Object.entries(SortedParams)) {\r",
							"        MyString += (`${key}=${value}&`);}\r",
							"\r",
							"    //  add hash value of token at the and of the string\r",
							"    MyString += ApiTokenHashvalue ;\r",
							"\r",
							"    // create the verifySign\r",
							"\r",
							"    const MySignature = crypto.MD5(MyString).toString();\r",
							"\r",
							"    return MySignature;\r",
							"\r",
							"    \r",
							"// algabetical sort helper function\r",
							"    function sortObj(obj) {\r",
							"        return Object.keys(obj).sort().reduce(function (result, key) {\r",
							"          result[key] = obj[key];\r",
							"          return result;\r",
							"        }, {});\r",
							"      }\r",
							"      \r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"merchantNo\": \"{{merchantNo}}\",\r\n        \"storeNo\": \"{{storeNo}}\",\r\n        \"verifySign\": \"{{MySignature}}\",\r\n        \"amount\": 100,\r\n        \"currency\": \"USD\",\r\n        \"settleCurrency\": \"USD\",\r\n        \"reference\": \"10101723\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mapi.yuansfer.yunkeguan.com/app-instore/v3/add",
					"protocol": "https",
					"host": [
						"mapi",
						"yuansfer",
						"yunkeguan",
						"com"
					],
					"path": [
						"app-instore",
						"v3",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "TRANSACT-QUERY-WITH-TRANSACTNO",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var crypto = require('crypto-js')\r",
							"\r",
							"var requestBody = pm.request.body\r",
							"\r",
							"var myPOSParamObject = {\r",
							"    merchantNo: pm.collectionVariables.get('merchantNo'),\r",
							"    storeNo: pm.collectionVariables.get('storeNo'),\r",
							"    transactionNo: requestBody.transactionNo,\r",
							"    // reference: No reference in this case\r",
							"}\r",
							"\r",
							"// Calculate the VeriSign signature:\r",
							"\r",
							"var MySignature = CalculateSignature(pm.collectionVariables.get('MyToken'), myPOSParamObject);\r",
							"\r",
							"postman.setEnvironmentVariable(\"merchantNo\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"storeNo\", myPOSParamObject.storeNo);\r",
							"postman.setEnvironmentVariable(\"MySignature\", MySignature);\r",
							"postman.setEnvironmentVariable(\"transactionNo\", myPOSParamObject.transactionNo);\r",
							"// postman.setEnvironmentVariable(\"reference\", myPOSParamObject.reference);\r",
							"\r",
							"// function that calculates the signature according to Pockyt rules\r",
							"function CalculateSignature(token,parameters)\r",
							"{\r",
							"    // calculate the hash value of the token\r",
							"    \r",
							"    // var ApiTokenHashvalue = CryptoJS.MD5(str_1 + str_2).toString();\r",
							"    var ApiTokenHashvalue = crypto.MD5(token).toString();\r",
							"    \r",
							"    // order parameters alfabetically\r",
							"    var SortedParams = sortObj(parameters);\r",
							"    \r",
							"    // Concatenate: add '&' between key and value pair and replace : for = \r",
							"    var MyString = '' ;\r",
							"    for (const [key, value] of Object.entries(SortedParams)) {\r",
							"        MyString += (`${key}=${value}&`);}\r",
							"\r",
							"    //  add hash value of token at the and of the string\r",
							"    MyString += ApiTokenHashvalue ;\r",
							"\r",
							"    // create the verifySign\r",
							"\r",
							"    const MySignature = crypto.MD5(MyString).toString();\r",
							"\r",
							"    return MySignature;\r",
							"\r",
							"    \r",
							"// algabetical sort helper function\r",
							"    function sortObj(obj) {\r",
							"        return Object.keys(obj).sort().reduce(function (result, key) {\r",
							"          result[key] = obj[key];\r",
							"          return result;\r",
							"        }, {});\r",
							"      }\r",
							"      \r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"merchantNo\": \"{{merchantNo}}\",\r\n        \"storeNo\": \"{{storeNo}}\",\r\n        \"verifySign\": \"{{MySignature}}\",\r\n        \"transactionNo\": \"317818259578419040\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mapi.yuansfer.yunkeguan.com/app-data-search/v3/tran-query",
					"protocol": "https",
					"host": [
						"mapi",
						"yuansfer",
						"yunkeguan",
						"com"
					],
					"path": [
						"app-data-search",
						"v3",
						"tran-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "TRANSACT-QUERY-WITH-REFERENCE-API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var crypto = require('crypto-js')\r",
							"\r",
							"var requestBody = pm.request.body\r",
							"\r",
							"var myPOSParamObject = {\r",
							"    merchantNo: pm.collectionVariables.get('merchantNo'),\r",
							"    storeNo: pm.collectionVariables.get('storeNo'),\r",
							"    // transactionNo: \"317818259578419040\"\r",
							"    reference: requestBody.reference\r",
							"}\r",
							"\r",
							"// Calculate the VeriSign signature:\r",
							"\r",
							"var MySignature = CalculateSignature(pm.collectionVariables.get('MyToken'), myPOSParamObject);\r",
							"\r",
							"postman.setEnvironmentVariable(\"merchantNo\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"storeNo\", myPOSParamObject.storeNo);\r",
							"postman.setEnvironmentVariable(\"MySignature\", MySignature);\r",
							"// postman.setEnvironmentVariable(\"transactionNo\", myPOSParamObject.transactionNo);\r",
							"postman.setEnvironmentVariable(\"reference\", myPOSParamObject.reference);\r",
							"\r",
							"// function that calculates the signature according to Pockyt rules\r",
							"function CalculateSignature(token,parameters)\r",
							"{\r",
							"    // calculate the hash value of the token\r",
							"    \r",
							"    // var ApiTokenHashvalue = CryptoJS.MD5(str_1 + str_2).toString();\r",
							"    var ApiTokenHashvalue = crypto.MD5(token).toString();\r",
							"    \r",
							"    // order parameters alfabetically\r",
							"    var SortedParams = sortObj(parameters);\r",
							"    \r",
							"    // Concatenate: add '&' between key and value pair and replace : for = \r",
							"    var MyString = '' ;\r",
							"    for (const [key, value] of Object.entries(SortedParams)) {\r",
							"        MyString += (`${key}=${value}&`);}\r",
							"\r",
							"    //  add hash value of token at the and of the string\r",
							"    MyString += ApiTokenHashvalue ;\r",
							"\r",
							"    // create the verifySign\r",
							"\r",
							"    const MySignature = crypto.MD5(MyString).toString();\r",
							"\r",
							"    return MySignature;\r",
							"\r",
							"    \r",
							"// algabetical sort helper function\r",
							"    function sortObj(obj) {\r",
							"        return Object.keys(obj).sort().reduce(function (result, key) {\r",
							"          result[key] = obj[key];\r",
							"          return result;\r",
							"        }, {});\r",
							"      }\r",
							"      \r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"merchantNo\": \"{{merchantNo}}\",\r\n        \"storeNo\": \"{{storeNo}}\",\r\n        \"verifySign\": \"{{MySignature}}\",\r\n        \"reference\": \"101016\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mapi.yuansfer.yunkeguan.com/app-data-search/v3/tran-query",
					"protocol": "https",
					"host": [
						"mapi",
						"yuansfer",
						"yunkeguan",
						"com"
					],
					"path": [
						"app-data-search",
						"v3",
						"tran-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "CANCEL-API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var crypto = require('crypto-js')\r",
							"\r",
							"var requestBody = pm.request.body\r",
							"\r",
							"var myPOSParamObject = {\r",
							"    merchantNo: pm.collectionVariables.get('merchantNo'),\r",
							"    storeNo: pm.collectionVariables.get('storeNo'),\r",
							"    transactionNo: requestBody.transactionNo\r",
							"}\r",
							"\r",
							"// Calculate the VeriSign signature:\r",
							"\r",
							"var MySignature = CalculateSignature(pm.collectionVariables.get('MyToken'), myPOSParamObject);\r",
							"\r",
							"postman.setEnvironmentVariable(\"merchantNo\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"storeNo\", myPOSParamObject.storeNo);\r",
							"postman.setEnvironmentVariable(\"MySignature\", MySignature);\r",
							"postman.setEnvironmentVariable(\"transactionNo\", myPOSParamObject.transactionNo);\r",
							"\r",
							"// function that calculates the signature according to Pockyt rules\r",
							"function CalculateSignature(token,parameters)\r",
							"{\r",
							"    // calculate the hash value of the token\r",
							"    \r",
							"    // var ApiTokenHashvalue = CryptoJS.MD5(str_1 + str_2).toString();\r",
							"    var ApiTokenHashvalue = crypto.MD5(token).toString();\r",
							"    \r",
							"    // order parameters alfabetically\r",
							"    var SortedParams = sortObj(parameters);\r",
							"    \r",
							"    // Concatenate: add '&' between key and value pair and replace : for = \r",
							"    var MyString = '' ;\r",
							"    for (const [key, value] of Object.entries(SortedParams)) {\r",
							"        MyString += (`${key}=${value}&`);}\r",
							"\r",
							"    //  add hash value of token at the and of the string\r",
							"    MyString += ApiTokenHashvalue ;\r",
							"\r",
							"    // create the verifySign\r",
							"\r",
							"    const MySignature = crypto.MD5(MyString).toString();\r",
							"\r",
							"    return MySignature;\r",
							"\r",
							"    \r",
							"// algabetical sort helper function\r",
							"    function sortObj(obj) {\r",
							"        return Object.keys(obj).sort().reduce(function (result, key) {\r",
							"          result[key] = obj[key];\r",
							"          return result;\r",
							"        }, {});\r",
							"      }\r",
							"      \r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"merchantNo\": \"{{merchantNo}}\",\r\n        \"storeNo\": \"{{storeNo}}\",\r\n        \"verifySign\": \"{{MySignature}}\",\r\n        \"transactionNo\": \"341815598184230981\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mapi.yuansfer.yunkeguan.com/app-data-search/v3/cancel",
					"protocol": "https",
					"host": [
						"mapi",
						"yuansfer",
						"yunkeguan",
						"com"
					],
					"path": [
						"app-data-search",
						"v3",
						"cancel"
					]
				}
			},
			"response": []
		},
		{
			"name": "PRE-PAY-API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var crypto = require('crypto-js')\r",
							"\r",
							"var requestBody = pm.request.body\r",
							"\r",
							"var myPOSParamObject = {\r",
							"    merchantNo: pm.collectionVariables.get('merchantNo'),\r",
							"    storeNo: pm.collectionVariables.get('storeNo'),\r",
							"    transactionNo: requestBody.transactionNo,\r",
							"    paymentBarcode: requestBody.paymentBarcode,\r",
							"    vendor: requestBody.vendor\r",
							"}\r",
							"\r",
							"// Calculate the VeriSign signature:\r",
							"\r",
							"var MySignature = CalculateSignature(pm.collectionVariables.get('MyToken'), myPOSParamObject);\r",
							"\r",
							"postman.setEnvironmentVariable(\"merchantNo\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"storeNo\", myPOSParamObject.storeNo);\r",
							"postman.setEnvironmentVariable(\"MySignature\", MySignature);\r",
							"postman.setEnvironmentVariable(\"transactionNo\", myPOSParamObject.transactionNo);\r",
							"postman.setEnvironmentVariable(\"paymentBarcode\", myPOSParamObject.paymentBarcode);\r",
							"postman.setEnvironmentVariable(\"vendor\", myPOSParamObject.vendor);\r",
							"\r",
							"// function that calculates the signature according to Pockyt rules\r",
							"function CalculateSignature(token,parameters)\r",
							"{\r",
							"    // calculate the hash value of the token\r",
							"    \r",
							"    // var ApiTokenHashvalue = CryptoJS.MD5(str_1 + str_2).toString();\r",
							"    var ApiTokenHashvalue = crypto.MD5(token).toString();\r",
							"    \r",
							"    // order parameters alfabetically\r",
							"    var SortedParams = sortObj(parameters);\r",
							"    \r",
							"    // Concatenate: add '&' between key and value pair and replace : for = \r",
							"    var MyString = '' ;\r",
							"    for (const [key, value] of Object.entries(SortedParams)) {\r",
							"        MyString += (`${key}=${value}&`);}\r",
							"\r",
							"    //  add hash value of token at the and of the string\r",
							"    MyString += ApiTokenHashvalue ;\r",
							"\r",
							"    // create the verifySign\r",
							"\r",
							"    const MySignature = crypto.MD5(MyString).toString();\r",
							"\r",
							"    return MySignature;\r",
							"\r",
							"    \r",
							"// algabetical sort helper function\r",
							"    function sortObj(obj) {\r",
							"        return Object.keys(obj).sort().reduce(function (result, key) {\r",
							"          result[key] = obj[key];\r",
							"          return result;\r",
							"        }, {});\r",
							"      }\r",
							"      \r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"merchantNo\": \"{{merchantNo}}\",\r\n        \"storeNo\": \"{{storeNo}}\",\r\n        \"verifySign\": \"{{MySignature}}\",\r\n        \"transactionNo\": \"317818259578419040\",\r\n        \"paymentBarcode\": \"286521182446652715\",\r\n        \"vendor\": \"alipay\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mapi.yuansfer.yunkeguan.com/app-instore/v3/prepay\"",
					"protocol": "https",
					"host": [
						"mapi",
						"yuansfer",
						"yunkeguan",
						"com"
					],
					"path": [
						"app-instore",
						"v3",
						"prepay\""
					]
				}
			},
			"response": []
		},
		{
			"name": "REFUND-API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var crypto = require('crypto-js')\r",
							"\r",
							"var requestBody = pm.request.body\r",
							"\r",
							"var myPOSParamObject = {\r",
							"    merchantNo: pm.collectionVariables.get('merchantNo'),\r",
							"    storeNo: pm.collectionVariables.get('storeNo'),\r",
							"    refundAmount: requestBody.refundAmount,\r",
							"    currency: requestBody.currency,\r",
							"    settleCurrency: requestBody.settleCurrency,\r",
							"    transactionNo: requestBody.transactionNo\r",
							"}\r",
							"\r",
							"// Calculate the VeriSign signature:\r",
							"\r",
							"var MySignature = CalculateSignature(pm.collectionVariables.get('MyToken'), myPOSParamObject);\r",
							"\r",
							"postman.setEnvironmentVariable(\"merchantNo\", myPOSParamObject.merchantNo);\r",
							"postman.setEnvironmentVariable(\"storeNo\", myPOSParamObject.storeNo);\r",
							"postman.setEnvironmentVariable(\"MySignature\", MySignature);\r",
							"postman.setEnvironmentVariable(\"refundAmount\", myPOSParamObject.refundAmount);\r",
							"postman.setEnvironmentVariable(\"currency\", myPOSParamObject.currency);\r",
							"postman.setEnvironmentVariable(\"settleCurrency\", myPOSParamObject.settleCurrency);\r",
							"postman.setEnvironmentVariable(\"transactionNo\", myPOSParamObject.transactionNo);\r",
							"\r",
							"// function that calculates the signature according to Pockyt rules\r",
							"function CalculateSignature(token,parameters)\r",
							"{\r",
							"    // calculate the hash value of the token\r",
							"    \r",
							"    // var ApiTokenHashvalue = CryptoJS.MD5(str_1 + str_2).toString();\r",
							"    var ApiTokenHashvalue = crypto.MD5(token).toString();\r",
							"    \r",
							"    // order parameters alfabetically\r",
							"    var SortedParams = sortObj(parameters);\r",
							"    \r",
							"    // Concatenate: add '&' between key and value pair and replace : for = \r",
							"    var MyString = '' ;\r",
							"    for (const [key, value] of Object.entries(SortedParams)) {\r",
							"        MyString += (`${key}=${value}&`);}\r",
							"\r",
							"    //  add hash value of token at the and of the string\r",
							"    MyString += ApiTokenHashvalue ;\r",
							"\r",
							"    // create the verifySign\r",
							"\r",
							"    const MySignature = crypto.MD5(MyString).toString();\r",
							"\r",
							"    return MySignature;\r",
							"\r",
							"    \r",
							"// algabetical sort helper function\r",
							"    function sortObj(obj) {\r",
							"        return Object.keys(obj).sort().reduce(function (result, key) {\r",
							"          result[key] = obj[key];\r",
							"          return result;\r",
							"        }, {});\r",
							"      }\r",
							"      \r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"merchantNo\": \"{{merchantNo}}\",\r\n        \"storeNo\": \"{{storeNo}}\",\r\n        \"verifySign\": \"{{MySignature}}\",\r\n        \"refundAmount\": \"1\",\r\n        \"currency\": \"USD\",\r\n        \"settleCurrency\": \"USD\",\r\n        \"transactionNo\": \"316129873376769782\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mapi.yuansfer.yunkeguan.com/app-data-search/v3/refund",
					"protocol": "https",
					"host": [
						"mapi",
						"yuansfer",
						"yunkeguan",
						"com"
					],
					"path": [
						"app-data-search",
						"v3",
						"refund"
					]
				}
			},
			"response": []
		}
	]
}